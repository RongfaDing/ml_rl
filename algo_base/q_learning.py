'''
Apply q_learning to selve MountainCar-v0
env info:
action space [0,1]  0 for left 1 for right
observation space [x,v] x for position v for velocity

to do what:
learn QTable   f(s,a)
| s  | a1 | a2
| s0 |    |

obstacle:
obs space is not discrete
'''

import gym
import numpy as np
import time
import logging
import math

env_mcar = 'MountainCar-v0'
env = gym.make(env_mcar)
print("what we see of low", env.observation_space.low)
print("what we see of high", env.observation_space.high)

logging.basicConfig(filename="./data/q_learning_r_raise_with_max_x.log_ep_raise_add_curious", level=logging.INFO)

class RL_QLearning(object):
    def __init__(self, envname, learning_rate=0.1, gamma=0.99, epsilon=0.8):
        self.env = gym.make(envname)
        self.q_table = {(18, 1): [-7.54909842416094, -53.77098556127953, -41.96891237470003], (19, 1): [-9.991652164745227, -43.08246488964396, -56.53207579823859],
                        (18, 2): [-68.93267052560198, -36.358374532332085, 0.6465329276701826], (19, 2): [-39.12034614977459, -23.690966368345954, 1.2473057620703538],
                        (17, 1): [-12.24697259700263, -20.15592141279704, -5.642487505110722], (20, 2): [-25.363706938969475, -19.661944783255763, 1.3567014486463944],
                        (21, 2): [-21.01071673160068, -15.537876827015905, 1.316786655432743], (21, 1): [-0.1863054074488586, -27.118482748628864, -53.83827584244578],
                        (20, 1): [-11.113841142927793, -44.64192412316284, -58.182909842356615], (16, 1): [-9.877150619348898, -12.44370785217466, -7.016077710358618],
                        (15, 1): [-10.48947476046686, -8.20941030297172, -11.182376502652563], (17, 2): [-56.11671961294515, -20.005872052213522, -0.740607677085112],
                        (16, 2): [-36.93514483293058, -20.396254897045566, -1.4474080230012991], (22, 2): [-18.249804784592072, -11.015856281353804, 1.1565918424046633],
                        (22, 1): [6.760964471614111, -23.75242219559717, -40.94957812174355], (14, 1): [-8.95380391694126, -10.194951958383989, -11.981006888751136],
                        (13, 1): [-9.4337565946162, -7.422165400908591, -12.636411307388475], (14, 2): [-14.057160758938007, -8.01214227805537, -1.4693586878813751],
                        (15, 2): [-27.781800763761858, -22.014327158908237, -1.825277435829778], (23, 2): [-25.993060285294483, -18.266599833476477, 0.9735352518429008],
                        (24, 2): [-35.94261006387474, -21.731927033829766, 0.8811935570448292], (25, 2): [-27.864807652935475, -9.798297482801576, 0.8816704236815216],
                        (25, 1): [7.382955742777322, -19.42408375264506, -29.95508852044371], (24, 1): [6.827215826862898, -18.555905215541852, -22.87377847415802],
                        (23, 1): [6.731969966913828, -21.34552586888425, -28.2692270487404], (12, 1): [-8.17096403997256, -7.981702924384833, -9.372214513460113],
                        (11, 1): [-1.80447862819547, -6.675853178005674, -7.280163921275782], (10, 1): [-4.816279519555752, 3.1115863632873206, -5.351084833649246],
                        (10, 2): [-26.945351538902493, -21.586029903307704, 7.8517074595007], (11, 2): [-25.849580597595725, -12.953856874037267, -1.321631831005722],
                        (12, 2): [-17.43596759795303, -12.852636870812725, -4.0476304480098415], (13, 2): [-9.466967940767063, -8.752938890457395, -2.6373465915546217],
                        (26, 2): [-26.099176899393626, -6.563893376283212, 0.9840344177338971], (26, 1): [7.32562815844772, -14.10066110206535, -20.803667776789425],
                        (27, 2): [-25.845996372441896, -13.952522477253988, 1.1869515160469135], (27, 1): [7.125764525214481, -23.91562366095838, -24.63273131418257],
                        (9, 1): [-2.093545258858984, -8.64492159968942, 3.0941365266906846], (9, 2): [-16.906601524148275, -7.924812584216907, 7.9933225045828395],
                        (28, 2): [-15.320220178109514, -7.406162923772665, 1.8716786711641928], (29, 2): [-1.4085665731102948, -4.552659966176843, 1.8916373105057238],
                        (29, 1): [5.187895382530102, -11.719690905595561, -26.24313254804601], (28, 1): [5.826302749834448, -12.411481420188199, -35.450708703272475],
                        (8, 1): [0.04499042328283245, 6.517886311213346, -0.6917874268549055], (8, 2): [-13.46568554807648, -6.9112288300069595, 8.197455051111895],
                        (30, 2): [-1.0705048370190655, -1.8177742435468411, 1.9453030109348415], (31, 2): [1.4713922151031305, -1.798678382541391, -5.676178134422753],
                        (31, 1): [4.940523073159036, -4.693198206427721, -13.101075750410427], (30, 1): [4.674037965381371, -16.996989580526943, -20.61232098656873],
                        (24, 0): [0.10694920455675629, 0.8363208231443784, 9.758186721680243], (23, 0): [-0.036867708579668236, -0.7161188125230404, 9.58717532689762],
                        (22, 0): [1.007035425354956, 1.0817652789739802, 9.381970304543437], (21, 0): [0.5724692627564987, 9.186293690336424, -7.159457143046069],
                        (20, 0): [8.978179148495123, 0.39950476543166324, -17.945364619505618], (19, 0): [0.2832369287992941, 8.767333211777116, -31.80578177395736],
                        (18, 0): [8.56864347759896, -1.1731622642464796, -58.0103689011086], (17, 0): [8.399790868520542, -3.1733949175379133, -40.648230377294446],
                        (16, 0): [8.211961927746557, -6.465217625407572, -37.88186279533494], (15, 0): [8.006931785393306, -4.8147941727412995, -24.89908900040146],
                        (14, 0): [7.79859451952889, -10.459979526306817, -18.54807467377495], (13, 0): [7.603563251913397, -15.496845691443967, -24.785887181783245],
                        (12, 0): [7.428848199271457, -10.797629403681354, -28.35485644805943], (11, 0): [7.19041813326511, -17.86488298254628, -25.95959224732347],
                        (10, 0): [6.970151019598205, -7.20286728433783, -28.729684881693103], (7, 1): [0.03352859172377717, -0.9107637679791495, 6.166423144818008],
                        (6, 1): [5.843398237975547, -2.8783397318738104, -2.0145935071041823], (5, 1): [-6.808621443618062, -4.306966592478699, 5.456366656133817],
                        (4, 1): [-10.880242690071743, -1.5375162971223364, 5.171849603152342], (3, 1): [-8.086637307785185, -1.494480729316086, 5.02257554206643],
                        (7, 2): [-9.498475521073303, -5.278018432886539, 8.39159240855377], (32, 2): [2.1791449334989212, -5.899619138244305, -6.695612172254217],
                        (32, 1): [3.849280679600097, -6.966186763998114, -16.697850090826307], (6, 2): [-29.03497897959598, -2.6185057297295633, 8.62993176311829],
                        (15, 3): [6.9022489813180234, 0.10383205026477524, 1.0073786181604374], (16, 3): [-5.390358309098012, -0.23447738712291308, 6.769681213063482],
                        (17, 3): [-8.58178151029391, 1.2465981516451026, 6.576905711979721], (18, 3): [-11.739593458681984, 6.365915251719084, 0.9380331232476133],
                        (21, 3): [-24.076644410771237, -13.885514640210438, 5.874483117282189], (22, 3): [-24.033943579461447, -12.628583812366692, 5.678609278770341],
                        (23, 3): [-22.29902102945086, -18.42393094609419, 5.546036549413451], (24, 3): [-21.194985203672204, -16.305056701522467, 5.394960332062542],
                        (33, 2): [1.9593581102487292, -0.40968776203229945, -3.5674900794560074], (34, 2): [3.4562323449519985, -8.249918944761207, -8.922261511049847],
                        (34, 1): [7.969521010109189, -5.339398718781312, -12.18503438207048], (33, 1): [2.5920056729944774, -5.034816035638997, -10.7409262025166],
                        (27, 0): [0.2381557239633687, 0.5282942195961646, 9.724019551457863], (26, 0): [1.059034188158915, -0.5298329067793364, 10.121920261035235],
                        (25, 0): [9.947027253385784, 0.1264895472546871, 1.0612714592928754], (4, 2): [-2.185278273457251, 9.174395726623226, 4.849314993105832],
                        (5, 2): [-8.164416142023793, -7.586815156257032, 8.909499493341697], (14, 3): [-0.07237825468379305, 0.5989657947749909, 7.093683884612949],
                        (19, 3): [-24.525592903560337, -3.8615733023469314, 6.199058891187898], (20, 3): [-16.09854502792574, -1.4655127238469174, 6.058960173646654],
                        (9, 0): [6.711826909262588, -5.024410304674851, -13.693511420780041], (8, 0): [6.457783435203092, -5.4153908690311185, -7.689906679183694],
                        (2, 1): [-8.551150797549116, -5.740534482795655, 4.807111301323908], (3, 2): [-2.8564193660392236, -0.007274979560840281, 9.089728120379398],
                        (13, 3): [0.7609781259535792, 7.286185620656358, 1.360020178383692], (2, 2): [-2.336370291728627, -1.3786061178182218, 8.371904695085457],
                        (12, 3): [7.462028824786111, 0.4713796644097119, -0.9369482590990238], (25, 3): [-12.89948621135921, -9.072718999202023, 5.228498934817746],
                        (27, 3): [-8.716458693595513, -3.7021719592023024, 4.889934614049951], (28, 3): [-3.0748847618905817, -1.3394032628410475, 4.734931954874228],
                        (26, 3): [-11.019396433399821, -4.161535804759955, 5.025562650596327], (35, 2): [3.5789650111921394, -3.691006879219544, -9.720453343538141],
                        (1, 1): [-6.711737369651978, -6.121910566272925, 5.12870225413586], (1, 2): [-8.366575123547609, -3.360823339785181, 7.761890650800819],
                        (35, 1): [7.7614133505960154, -5.716970090065702, -8.240151846905889], (11, 3): [2.297879351702956, 7.662447242533821, 0.5354500425895045],
                        (36, 2): [3.3656645061246913, -1.4073396614485583, -5.476135922294916], (7, 0): [6.190331835260857, -0.6560266289768882, -3.3740130517477964],
                        (0, 1): [-45.69754405433689, -5.4508346371924095, 4.594369535987197], (10, 3): [7.79935453653815, -0.5424236199803129, 1.4213031745598446],
                        (29, 3): [-1.1876551025240547, -0.07442408594532932, 4.547842007089424], (30, 3): [0.3365105554768401, -1.2053988840176182, 4.30388820794745],
                        (31, 3): [-2.6109913431093505, -0.4439950408352324, 4.154353349734771], (28, 0): [-0.2874246659242896, 8.92769911214723, 0.8866656351289882],
                        (6, 0): [5.94480868362086, -1.7435281351412675, -4.435180391556946], (5, 0): [5.7401292475462355, -3.4202933211189914, -4.194569039140134],
                        (0, 2): [-12.43876931417519, -10.265099642890691, 6.910370083943928], (8, 3): [8.155844850797775, -1.6670543807176579, -1.6910767462367287],
                        (9, 3): [-0.5400284413876315, 1.902284590588219, 7.9935878102135725], (36, 1): [7.700755605074307, -6.316366264596454, -3.302220681478258],
                        (30, 0): [8.509823902377507, 1.0435196790130215, 0.9239905559073266], (29, 0): [0.8755662975960917, 8.457987655001547, 0.5604837894715635],
                        (4, 0): [5.511087682691529, -0.6448702788575009, -2.8965396229202374], (32, 3): [-2.150036743487502, -2.663600999445205, 3.857122129701255],
                        (33, 3): [0.42546513955567256, -0.32240336898397454, 3.9556189248907576], (37, 2): [3.0939260804299784, -5.013206194426415, -3.7501948579339186],
                        (38, 2): [-0.0467480387622483, 2.8262674032414834, -3.273018416768308], (37, 1): [2.625315505325108, -0.7722260481123869, 7.197302079865551],
                        (39, 2): [-2.103518254401451, 2.5015634822370383, -4.415368081246508], (40, 2): [-0.965625628601583, 2.225929986383828, -0.8650416890930331],
                        (40, 1): [4.323938628430072, -3.6234712306825325, -3.2406917996003437], (31, 0): [0.9494208795721916, 0.7475149111371818, 8.516404449082145],
                        (3, 0): [1.1219890791048381, 1.3145515450654288, 5.289651131431483], (2, 0): [3.7858877668859043, -0.35089587586216103, -0.4327274696406733],
                        (1, 0): [-0.39352843344460653, 4.048177825112219, -0.6528165568830393], (41, 2): [1.8424060271229776, -2.466869488779703, -1.7796148036390222],
                        (42, 2): [-4.612514732206534, -2.6879172572135803, 1.5583808207611973], (43, 2): [-7.89892900099867, -6.982041236432868, 1.2599251370978335], (44, 2): [-6.97857597468193, -4.685997518693954, 0.9425323748185443], (42, 1): [-0.055926684430100904, -3.9558326457626847, -4.161108606503189], (41, 1): [2.136585184439071, -4.538260099384204, -5.4794958908311155], (39, 1): [6.1652825229159625, -2.993640318723982, -4.463670056570736], (38, 1): [6.768550606984971, -3.970218890346388, -4.287414345737265], (33, 0): [8.486933005066879, 0.2377700719246915, 0.13787177649153884], (32, 0): [0.08112460491563143, 0.4805051633406724, 8.633938126699142], (34, 3): [-0.18638043329109913, -0.22984325004411504, 3.7531110155178453], (45, 2): [-2.491301792320654, -1.205858233524692, 0.626692306510658], (46, 2): [-2.169398440164632, -1.2653050605004756, 0.3860866323237814], (47, 2): [0.22437641603670977, -0.27412929835367356, -0.13531258110545008], (7, 3): [0.5065891406272379, 1.2847995409955002, 8.330321355974375], (35, 3): [-0.6767170029361254, -0.2168361803758285, 3.5125839425571606], (36, 3): [-0.8125018787080766, -0.9212633344509819, 3.240961943255291], (37, 3): [-1.481271726935554, -1.0854792079041364, 2.9851622036584793], (43, 1): [-2.101881481910458, -5.353305474505485, -5.049532717789769], (6, 3): [0.5016384490741042, 5.982218141656568, 0.7826615701871851], (38, 3): [-0.5480215049537321, -0.5999506631440803, 2.7029877691674424], (0, 0): [0.015981208325575987, -0.13006229680979622, 3.9549111290608447], (39, 3): [-0.4186122867857334, 2.4494121166869807, 0.25336514771673124], (40, 3): [0.14060864735638498, 0.3178114721842, 2.1329519564863944], (41, 3): [0.1457643526636598, 0.21807712782333177, 1.823083725015211], (35, 0): [0.3981082754782602, 8.84916516923725, 0.5181611385398913], (34, 0): [8.725711346248733, 0.6063886678145177, 0.493799731609016], (44, 1): [-5.167958716712936, -4.855824507003994, -5.113653342653827], (36, 0): [0, 0.6649234194058098, 8.460040552971497], (45, 1): [-2.4184810810289226, -2.630305191957359, -2.404864492901267], (42, 3): [0.13531168243407748, 1.5517280997924552, 0.08964565805117133], (43, 3): [0.03418749646035444, 0.012325687237035744, 1.2542978256086244], (44, 3): [0.9683860931499326, 0.077961254047382, 0.008786076419925815], (37, 0): [3.1712080550748256, 0.28688398212860466, 0], (46, 1): [-0.7884232326395362, -0.7453113725221213, -0.7111866098976977], (45, 3): [0.051078231610981066, 0.4073442736578093, 0], (47, 3): [0.10434062000000001, 0, 0], (46, 3): [0.012622614670000004, 0, 0.23291825037160532]}

        self.lr = learning_rate
        self.gamma = gamma
        self.ep = epsilon

    def set_ep(self,ep):
        self.ep = ep

    def reset_env(self):
        return self.env.reset()

    def render_env(self):
        self.env.render()

    def step(self, action):
        return self.env.step(action)

    def is_new(self,s):
        return self.discrete_obs(s) in self.q_table

    def discrete_obs(self, s):
        x_l, v_l = self.env.observation_space.low
        x_h, v_h = self.env.observation_space.high
        x_ret = int(20*(s[0]-x_l)/(x_h-x_l))  # discrete to [0,40]
        v_ret = int(20*(s[-1]-v_l)/(x_h-x_l)) #
        return x_ret, v_ret

    def learn(self, s, a, r, s_, isterminal=True):
        x, v = self.discrete_obs(s)
        if (x, v) in self.q_table:
            q_predict = max(self.q_table.get((x, v)))
        else:
            self.q_table[(x, v)] = [0, 0]
            q_predict = 0
        if not isterminal:
            x_, v_ = self.discrete_obs(s_)
            if (x_, v_) in self.q_table:
                q_target = r + self.gamma * max(self.q_table[(x_, v_)])
            else:
                q_target = r
        else:
            q_target = r
        self.q_table[(x, v)][a] += self.lr*(q_target - q_predict)

    def choose_action(self, s):
        # print("s:", s, self.discrete_obs(s))
        if self.discrete_obs(s) in self.q_table and np.random.uniform() < self.ep:
            qa_lst = self.q_table[self.discrete_obs(s)]
            a_chosed = qa_lst.index(max(qa_lst))
        else:
            a_chosed = np.random.choice([0, 1])
        return a_chosed

if __name__ =="__main__":

    n_episode = 5000
    agent = RL_QLearning(envname=env_mcar)
    mean_10 = []
    for i_episode in range(n_episode):
        max_x = 0
        obs = agent.reset_env()
        new_ep = 0.8 + (i_episode)//100*0.005
        agent.set_ep(new_ep)
        acc_r = 0
        acc_step = 0
        while True:
            agent.render_env()

            action = agent.choose_action(obs)
            obs_, reward, done, _ = agent.step(action)
            #if math.fabs(obs_[0]) > math.fabs(env.observation_space.high[0])/4:
            #    reward += 0.5
            # reward += 0.95*math.fabs(math.fabs(obs_[0])-math.fabs(obs[0]))\
            #           /(env.observation_space.high[0]-env.observation_space.low[0])
            if agent.is_new(obs_):
                reward += 0.1

            if math.fabs(obs_[0]) > max_x:
                max_x = math.fabs(obs_[0])
            agent.learn(obs, action, reward, obs_, isterminal=done)
            acc_r += reward
            acc_step += 1
            obs = obs_
            if done:
                if len(mean_10) < 10:
                    mean_10.append(max_x)
                else:
                    mean_10[i_episode%10]=max_x
                info = "episode {} after step:{} ep:{:.4f} we get:{:.4f} max x :{:.4f}, max-mean7: {:.4f}".format(i_episode,acc_step,new_ep,acc_r,max_x,np.mean(mean_10))
                print(info)
                logging.info(info)
                if i_episode % 100 == 0:
                    tmp ="{}".format(agent.q_table)
                    logging.critical(tmp)
                break

        time.sleep(0.1)